<?php

namespace AppBundle\Repository;

/**
 * MembershipRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MembershipRepository extends \Doctrine\ORM\EntityRepository
{

    public function findWithNewCycleStarting($date = null)
    {
        if (!($date)) {
            $date = new \Datetime('now');
        }

        $qb = $this->createQueryBuilder('u');

        $qb
            ->where('u.withdrawn = 0')
            ->andWhere('u.firstShiftDate is not NULL')
            ->andWhere('u.firstShiftDate != :now')
            ->andWhere('MOD(DATE_DIFF(:now, u.firstShiftDate), 28) = 0')
            ->setParameter('now', $date);

        return $qb
            ->getQuery()
            ->getResult();
    }

    public function findWithHalfCyclePast($date = null)
    {
        if (!($date)) {
            $date = new \Datetime('now');
        }
        $qb = $this->createQueryBuilder('u');

        $qb
            ->where('u.withdrawn = 0')
            ->andWhere('u.frozen = 0')
            ->andWhere('u.firstShiftDate is not NULL')
            ->andWhere('MOD(DATE_DIFF(:now, u.firstShiftDate), 14) = 0')
            ->andWhere('MOD(DATE_DIFF(:now, u.firstShiftDate), 28) != 0')
            ->setParameter('now', $date);

        return $qb
            ->getQuery()
            ->getResult();
    }

    /**
     * @param string $role
     *
     * @return array
     */
    public function findByRole($role)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('u')
            ->from($this->_entityName, 'u')
            ->where('u.roles LIKE :roles')
            ->setParameter('roles', '%"' . $role . '"%');

        return $qb->getQuery()->getResult();
    }

    /**
     * @param \DateTime $from
     *
     * @return array
     */
    public function findWithExpiredRegistrationFrom($from)
    {
        $qb = $this->createQueryBuilder('m');
        $qb->join('m.lastRegistration', 'r')
            ->where('m.withdrawn = false')
            ->andWhere("DATE_ADD(r.date, 1, 'YEAR') < :from")
            ->setParameter('from', $from);

        return $qb->getQuery()->getResult();
    }


}
